<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Editor | Hong Xu]]></title>
  <link href="http://xuhdev.github.com/blog/categories/editor/atom.xml" rel="self"/>
  <link href="http://xuhdev.github.com/"/>
  <updated>2012-03-14T21:47:38+08:00</updated>
  <id>http://xuhdev.github.com/</id>
  <author>
    <name><![CDATA[Hong Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use EditorConfig to Maintain Consistent Coding Styles between Different Editors and IDEs]]></title>
    <link href="http://xuhdev.github.com/blog/2012/03/14/use-editorconfig-to-maintain-consistent-coding-styles-between-different-editors-and-ides/"/>
    <updated>2012-03-14T21:46:00+08:00</updated>
    <id>http://xuhdev.github.com/blog/2012/03/14/use-editorconfig-to-maintain-consistent-coding-styles-between-different-editors-and-ides</id>
    <content type="html"><![CDATA[<p>Usually for a project with more than one developers involved, it is essentially
important for the project to define and maintain a consistent <a href="http://en.wikipedia.org/wiki/Programming_style">coding style</a>.
Most code editors and IDEs, such as <a href="http://www.vim.org">Vim</a>, <a href="http://www.gnu.org/software/emacs">Emacs</a>, <a href="http://www.codeblocks.org">Code::Blocks</a>,
provide settings related to coding styles, such as the width of tab, the size of
indentation, <a href="http://en.wikipedia.org/wiki/Newline">end of line</a>, etc. However, it is hard to provide the same settings
for different Editors and IDEs: we have to maintain many config files for
different editors and IDEs, such as <a href="http://vim.wikia.com/wiki/Open_vimrc_file">.vimrc</a> for <a href="http://www.vim.org">Vim</a>, <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html">.emacs</a> for
<a href="http://www.gnu.org/software/emacs">Emacs</a>. In order to solve this, <a href="http://editorconfig.org">EditorConfig</a> was born. By defining coding
style in files named <code>.editorconfig</code>, the <a href="http://editorconfig.org/#download">EditorConfig plugins</a> for different
editors and IDEs will change your coding style automatically to adjust your
coding style.</p>

<!-- more -->


<h3>Download EditorConfig Plugin for Your Editor/IDE</h3>

<p>To use EditorConfig, you have to download the corresponding
[EditorConfig plugin][] for your Editor or IDE. Follow the installation
instructions to install them.</p>

<h3>Create an <code>.editorconfig</code> File for Your Project</h3>

<p>An <code>.editorconfig</code> file is an <a href="http://en.wikipedia.org/wiki/INI_file">INI</a> format file, which contains the settings
of your coding style. You could use one or more <code>.editorconfig</code> files to
indicate the coding style of your project. Let's try a simple example. Create a
file named <code>.editorconfig</code> at the root of your project source tree (if you are
working on Windows and using Windows Explorer, you will find Window Explorer
prevent report such file name illegal. Don't worry, just create a file named
<code>.editorconfig.</code>, which will be renamed to <code>.editorconfig</code> automatically by
Windows Explorer):</p>

<p>```ini .editorconfig
; indicate this is the root of the project
root = true</p>

<p>[*]
indent_style = space
end_of_line = cr</p>

<p>[*.c]
indent_size = 4</p>

<p>[Makefile]
indent_style = tab
indent_size = 8
```</p>

<p>Let's check this file line by line.</p>

<p><code>ini
; indicate this is the root of the project
</code></p>

<p>This is a <a href="http://en.wikipedia.org/wiki/Comment_(computer_programming)">comment line</a>. All lines starting with a <code>#</code> or <code>;</code> will be
regarded as comment lines.</p>

<p><code>ini
root = true
</code></p>

<p>This line tells EditorConfig this is the root of the project, thus EditorConfig
won't apply the settings of <code>.editorconfig</code> outside this directory.</p>

<p><code>ini
[*]
indent_style = space
end_of_line = cr
</code></p>

<p>These 3 lines indicates for all files, if not specially specified, we use spaces
for indentation, and use <code>cr</code> as the <a href="http://en.wikipedia.org/wiki/Newline">EOL</a> marker for all files.</p>

<p><code>ini
[*.c]
indent_size = 4
</code></p>

<p>These two lines means, for any C source files, the size of indentation is 4.</p>

<p><code>ini
[Makefile]
indent_style = tab
indent_size = 8
</code></p>

<p>These 3 lines tell EditorConfig that, for any file named <code>Makefile</code>, we use tab
for indentation, and the size of indentation is 8.</p>

<h3>More</h3>

<p>This is a simple introduction of <a href="http://editorconfig.org">EditorConfig</a>. If you find this useful,
visit <a href="http://editorconfig.org">EditorConfig homepage</a> to see more about it.</p>

<p><em>related article:</em></p>

<p><a href="http://treyhunner.com/2012/02/editorconfig"><strong>Maintaining Consistent Coding Conventions With EditorConfig</strong></a> by <a href="http://treyhunner.com"><em>Trey Hunner</em></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use SingleCompile to Compile and Run a Single Source File Easily in Vim]]></title>
    <link href="http://xuhdev.github.com/blog/2012/03/07/use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/"/>
    <updated>2012-03-07T21:08:00+08:00</updated>
    <id>http://xuhdev.github.com/blog/2012/03/07/use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim</id>
    <content type="html"><![CDATA[<p>Although <a href="http://www.vim.org">Vim</a> itself has already been a very powerful text editor, its
plugins make it even better. <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile</a> is a plugin aimed at making it
more convenient to compile or run a single source file without leaving Vim.</p>

<p>Consider this situation: you've just written a small C file (or small python
script) with Vim for some tiny test, then you need to use <code>:!gcc %:p</code> to compile
the C source file and run the executable with <code>:!./a.out</code> command (Or use
<code>:!python %:p</code> to run the python script). Although a key mapping could make
this process a bit convenient, but many of Vim's advanced features will become
unavailable, such as <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix</a>, <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#compiler-select">compiler feature</a>.  <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile</a>
was born to solve this problem, making this process more convenient and
powerful than simply defining a few key mappings:</p>

<ul>
<li>Compile or run the source file quickly using <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix feature</a>
and <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#compiler-select">compiler feature</a> of vim;</li>
<li>Auto detecting compilers and interpreters;</li>
<li>Fast switch between several installed compilers or interpreters;</li>
<li>Multi-language support;</li>
<li>Custom your own compiler/interpreter template;</li>
<li>View the result of last run command at any time(requires <code>tee</code> command);</li>
<li>Run the compiled program asynchronously and view the result at any time
(see <code>:SCCompileRunAsync</code> in the help file).</li>
</ul>


<p>Let's see more about SingleCompile.</p>

<!-- more -->


<h3>Installation</h3>

<p>Just like most other Vim plugins, it's simple: Download the SingleCompile.zip
file from <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile homepage</a> and extract it to your Vim
runtime directory(<code>~/.vim</code> on UNIX/Linux or
<code>$VIM_INSTALLATION_FOLDER\vimfiles</code> on windows). Execute <code>:helptags
~/.vim/doc</code> on UNIX/Linux or <code>:helptags $VIM_INSTALLATION_FOLDER\vimfiles\doc</code>
on Windows if you need to check the SingleCompile documentation. If you are
using <a href="https://github.com/tpope/vim-pathogen">pathogen</a> to manage your Vim plugins, use the following commands to
install it (on UNIX/Linux):</p>

<p><code>sh
cd ~/.vim/bundle
git clone git://github.com/xuhdev/SingleCompile.git
</code></p>

<p>The following key mappings should be very helpful for you. Insert them into
your <code>.vimrc</code> file if you think it useful:</p>

<p><code>vim
nmap &lt;F9&gt; :SCCompile&lt;cr&gt;
nmap &lt;F10&gt; :SCCompileRun&lt;cr&gt;
</code></p>

<p>The above two lines will make <code>F9</code> as the key to trigger the compilation and
<code>F10</code> to compile the source file and run.</p>

<h3>Use SingleCompile to Compile and Run a Source File</h3>

<p>Let's try to create a new C source file called <code>hello.c</code>:</p>

<p><code>sh
vim hello.c
</code></p>

<p>Copy the following content into the buffer:</p>

<p>```c hello.c</p>

<h1>include &lt;stdio.h></h1>

<p>int main(void)
{</p>

<pre><code>printf("Hello, SingleCompile!\n");
return 0;
</code></pre>

<p>}
```</p>

<p>Now execute <code>:SCCompileRun</code> (or press <code>F10</code> if you have set the key mapping
above). Then SingleCompile will automatically find a C compiler available on
your system (e.g. gcc on my Linux) and use this compiler to compile your
source file and run the executable file. The output should be displayed on
your screen now:</p>

<p><img src="/1.png" alt="" /></p>

<p>What if you want to check the result again after you press any key and the
output is dismissed? Simple, use <code>:SCViewResult</code> command to get it back:</p>

<p><img src="/2.png" alt="" /></p>

<p>OK, let's try to add some syntax errors in the source file. Change the buffer
into the following:</p>

<p>```c hello.c</p>

<h1>include &lt;stdio.h></h1>

<p>int main(void)
{</p>

<pre><code>printf("Hello, SingleCompile!\n");
retur 0; /* a typo is here: the "return" loses its "n" */
</code></pre>

<p>}
```</p>

<p>Now execute <code>:SCCompileRun</code> (or press <code>F10</code> if you have set the key mapping
above). You should see some compilation errors displayed on the screen now:</p>

<p><img src="/3.png" alt="" /></p>

<p>Now press any key to dismiss the error messages. Now let's open the Vim
<a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix</a> window by executing <code>:cope</code>:</p>

<p><img src="/4.png" alt="" /></p>

<p>See? The error messages has been put in the Vim quickfix window, which makes
it quite easy to locate syntax errors!</p>

<h3>Interpreting Languages</h3>

<p>For interpreting languages such as python, perl, things are similar:
interpreter auto detection, Quickfix, etc. but there is one notable difference:
<code>:SCCompile</code> and <code>:SCCompileRun</code> do the same job for such kind of languages --
they both call the interpreter to run your script, since there is no
compilation required for such langauges.</p>

<h3>More</h3>

<p>SingleCompile is far more powerful than this. Execute <code>:h SingleCompile</code> within
Vim to see SingleCompile documentation if you want to know more about
SingleCompile.</p>
]]></content>
  </entry>
  
</feed>
