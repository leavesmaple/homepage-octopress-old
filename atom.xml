<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hong Xu]]></title>
  <link href="http://xuhdev.github.com/atom.xml" rel="self"/>
  <link href="http://xuhdev.github.com/"/>
  <updated>2012-03-11T21:47:41+08:00</updated>
  <id>http://xuhdev.github.com/</id>
  <author>
    <name><![CDATA[Hong Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add an "Show Image" Switch for the Safari Browser on Your iPhone/iPad/iPod Touch]]></title>
    <link href="http://xuhdev.github.com/blog/2012/03/10/add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/"/>
    <updated>2012-03-10T16:41:00+08:00</updated>
    <id>http://xuhdev.github.com/blog/2012/03/10/add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch</id>
    <content type="html"><![CDATA[<p>When we are using the Mobile Safari Browser to surfing the Internet, sometimes
the page loading speed will be largely slowed down because of the large size of
the images on the web page. Surprisingly, as one of the world&#8217;s most popular
browser, the Safari Browser on <a href="http://en.wikipedia.org/wiki/IOS">iOS</a> (the mobile operating system running on
iPhone/iPad/iPod Touch) does not provide a switch to turn on/off the image display.
However, this does not mean you can not add such a switch by yourself.</p>

<!-- more -->


<h3>Get Your Device Jailbroken</h3>

<p><a href="http://en.wikipedia.org/wiki/IOS_jailbreaking">Jailbreaking</a> is the process of removing the limitations imposed
by Apple on devices running the iOS operating system, such as iPhone, iPad,
iPod Touch, Apple TV. You need to jailbreak your device before you continue to next
step. To get your device jailbroken, please take a look at
<a href="http://www.idownloadblog.com/jailbreak">this page</a>. If you already have your
device jailbroken, you could skip this step.</p>

<h3>Modify Safari.plist</h3>

<p>After jailbreaking, the next thing you need to do is to edit a <a href="http://en.wikipedia.org/wiki/Property_list">plist</a> file
located on your device. If you are a normal user, you may want to install
<a href="http://moreinfo.thebigboss.org/moreinfo/depiction.php?file=ifileData">iFile</a>. If you are familiar with UNIX shell,
<a href="http://thebigboss.org/guides-iphone-ipod-ipad/install-and-use-ssh">log into your device with ssh</a>
might be the best way for you.</p>

<p>You need to edit a file named <code>Safari.plist</code> located in
<code>/System/Library/PreferenceBundles/MobileSafariSettings.bundle/</code> on your device.
To edit this file with iFile, first enter
<code>System/Library/PreferenceBundles/MobileSafariSettings.bundle/</code>.</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/1.png" alt="" /></p>

<p>Then tap <code>Safari.plist</code> and select <code>Text Viewer</code>.</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/2.png" alt="" /></p>

<p>Tap the <code>Edit</code> button on the top left corner.</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/3.png" alt="" /></p>

<p>Insert the following text into this file before the last <code>&lt;/array&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>cell<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>PSGroupCell<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>defaults<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>com.apple.mobilesafari<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>key<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>WebKitDisplayImagesKey<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>cell<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>PSSwitchCell<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>Show Images<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>default<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should look something like this:</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/4.png" alt="" /></p>

<p>Save the file. Now open <code>Settings-&gt;Safari</code>, you should see a <code>Show Images</code>
switch at the bottom. If the switch is not shown, please
<a href="http://www.apple.com/support/iphone/assistant/phone/#section_1">reboot your device</a>
and open Safari Settings again.</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/5.png" alt="" /></p>

<p>I tested this on iOS 5.0.1, but it should also work on other versions of iOS.</p>

<p>This post was written based on
<a href="http://bbs.weiphone.com/read-htm-tid-2871429.html">this post</a> (a Chinese post).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use SingleCompile to Compile and Run a Single Source File Easily in Vim]]></title>
    <link href="http://xuhdev.github.com/blog/2012/03/07/use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/"/>
    <updated>2012-03-07T21:08:00+08:00</updated>
    <id>http://xuhdev.github.com/blog/2012/03/07/use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim</id>
    <content type="html"><![CDATA[<p>Although <a href="http://www.vim.org">Vim</a> itself has already been a very powerful text editor, its
plugins make it even better. <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile</a> is a plugin aimed at making it
more convenient to compile or run a single source file without leaving Vim.</p>

<p>Consider this situation: you&#8217;ve just written a small C file (or small python
script) with Vim for some tiny test, then you need to use <code>:!gcc %:p</code> to compile
the C source file and run the executable with <code>:!./a.out</code> command (Or use
<code>:!python %:p</code> to run the python script). Although a key mapping could make
this process a bit convenient, but many of Vim&#8217;s advanced features will become
unavailable, such as <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix</a>, <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#compiler-select">compiler feature</a>.  <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile</a>
was born to solve this problem, making this process more convenient and
powerful than simply defining a few key mappings:</p>

<ul>
<li>Compile or run the source file quickly using <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix feature</a>
and <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#compiler-select">compiler feature</a> of vim;</li>
<li>Auto detecting compilers and interpreters;</li>
<li>Fast switch between several installed compilers or interpreters;</li>
<li>Multi-language support;</li>
<li>Custom your own compiler/interpreter template;</li>
<li>View the result of last run command at any time(requires <code>tee</code> command);</li>
<li>Run the compiled program asynchronously and view the result at any time
(see <code>:SCCompileRunAsync</code> in the help file).</li>
</ul>


<p>Let&#8217;s see more about SingleCompile.</p>

<!-- more -->


<h3>Installation</h3>

<p>Just like most other Vim plugins, it&#8217;s simple: Download the SingleCompile.zip
file from <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile homepage</a> and extract it to your Vim
runtime directory(<code>~/.vim</code> on UNIX/Linux or
<code>$VIM_INSTALLATION_FOLDER\vimfiles</code> on windows). Execute <code>:helptags
~/.vim/doc</code> on UNIX/Linux or <code>:helptags $VIM_INSTALLATION_FOLDER\vimfiles\doc</code>
on Windows if you need to check the SingleCompile documentation. If you are
using <a href="https://github.com/tpope/vim-pathogen">pathogen</a> to manage your Vim plugins, use the following commands to
install it (on UNIX/Linux):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~/.vim/bundle
</span><span class='line'>git clone git://github.com/xuhdev/SingleCompile.git
</span></code></pre></td></tr></table></div></figure>


<p>The following key mappings should be very helpful for you. Insert them into
your <code>.vimrc</code> file if you think it useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>F9<span class="p">&gt;</span> :SCCompile<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>F10<span class="p">&gt;</span> :SCCompileRun<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above two lines will make <code>F9</code> as the key to trigger the compilation and
<code>F10</code> to compile the source file and run.</p>

<h3>Use SingleCompile to Compile and Run a Source File</h3>

<p>Let&#8217;s try to create a new C source file called <code>hello.c</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>vim hello.c
</span></code></pre></td></tr></table></div></figure>


<p>Copy the following content into the buffer:</p>

<figure class='code'><figcaption><span>hello.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, SingleCompile!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now execute <code>:SCCompileRun</code> (or press <code>F10</code> if you have set the key mapping
above). Then SingleCompile will automatically find a C compiler available on
your system (e.g. gcc on my Linux) and use this compiler to compile your
source file and run the executable file. The output should be displayed on
your screen now:</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-07-use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/1.png" alt="" /></p>

<p>What if you want to check the result again after you press any key and the
output is dismissed? Simple, use <code>:SCViewResult</code> command to get it back:</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-07-use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/2.png" alt="" /></p>

<p>OK, let&#8217;s try to add some syntax errors in the source file. Change the buffer
into the following:</p>

<figure class='code'><figcaption><span>hello.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, SingleCompile!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">retur</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* a typo is here: the &quot;return&quot; loses its &quot;n&quot; */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now execute <code>:SCCompileRun</code> (or press <code>F10</code> if you have set the key mapping
above). You should see some compilation errors displayed on the screen now:</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-07-use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/3.png" alt="" /></p>

<p>Now press any key to dismiss the error messages. Now let&#8217;s open the Vim
<a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix</a> window by executing <code>:cope</code>:</p>

<p><img src="http://xuhdev.github.com/images/posts/2012-03-07-use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/4.png" alt="" /></p>

<p>See? The error messages has been put in the Vim quickfix window, which makes
it quite easy to locate syntax errors!</p>

<h3>Interpreting Languages</h3>

<p>For interpreting languages such as python, perl, things are similar:
interpreter auto detection, Quickfix, etc. but there is one notable difference:
<code>:SCCompile</code> and <code>:SCCompileRun</code> do the same job for such kind of languages &#8211;
they both call the interpreter to run your script, since there is no
compilation required for such langauges.</p>

<h3>More</h3>

<p>SingleCompile is far more powerful than this. Execute <code>:h SingleCompile</code> within
Vim to see SingleCompile documentation if you want to know more about
SingleCompile.</p>
]]></content>
  </entry>
  
</feed>
