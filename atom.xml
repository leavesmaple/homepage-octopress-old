<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hong Xu]]></title>
  <link href="http://xuhdev.github.com/atom.xml" rel="self"/>
  <link href="http://xuhdev.github.com/"/>
  <updated>2012-03-18T12:23:00+08:00</updated>
  <id>http://xuhdev.github.com/</id>
  <author>
    <name><![CDATA[Hong Xu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generate Ctags Files for C/C++ Source Files and All of Their Included Header Files]]></title>
    <link href="http://xuhdev.github.com/blog/2012/03/17/generate-ctags-files-for-c-slash-c-plus-plus-source-files-and-all-of-their-included-header-files/"/>
    <updated>2012-03-17T14:29:00+08:00</updated>
    <id>http://xuhdev.github.com/blog/2012/03/17/generate-ctags-files-for-c-slash-c-plus-plus-source-files-and-all-of-their-included-header-files</id>
    <content type="html"><![CDATA[<p><em>This post is for those people who use <a href="http://ctags.sourceforge.net">Exuberant Ctags</a>. If you are
using
<a href="http://en.wikipedia.org/wiki/Ctags#Variants_of_ctags">other versions of ctags</a>,
this post may not be useful.</em></p>

<p>When using <a href="http://ctags.sourceforge.net">ctags</a> to generate the tags file for C/C++ projects, usually we
use the following command:</p>

<pre><code>ctags -R .
</code></pre>

<p>For some users that need more info of the symbols, they may use this command
instead:</p>

<pre><code>ctags –R --c++-kinds=+p --fields=+iaS --extra=+q .
</code></pre>

<p>No matter which one you use, the generated tags file only contains the symbols
in the files in your project source tree, but not any external file, such as
standard header files (e.g. stdio.h, stdlib.h), etc. thus editors or IDEs that
use tags files, such as <a href="http://www.vim.org">Vim</a>, are not able to locate symbols in external
header files. There was a solution: generate a tags file for any external header
files first, and let the editor or IDE read both the generated tags file and the
tags file for the project source tree. For example, the following command will
generate a tags file for all your system header files on UNIX/Linux:</p>

<pre><code>ctags –R --c++-kinds=+p --fields=+iaS --extra=+q /usr/include
</code></pre>

<p>This command usually takes a very long time to finish, and finally it gives a
quite large tags file, which causes the editor or IDE a long time to search this
tags file for symbols. To solve this problem, I came up with another idea.</p>

<p>Why must we generate a tags file containing all the symbols in the system
header? If we only generate the tags file only for the header files that are
related to our projects, would it be faster? That&#8217;s the point of this idea. We
could first search for the header files that are included in our projects, and
then we use ctags to generate a tags file for these files and our source files,
in this way, a much smaller tags file that containing all the symbols that maybe
useful for the project is generated.</p>

<!-- more -->


<p>To do this, I wrote a shell script:</p>

<figure class='code'><figcaption><span>ctags_with_dep.sh</span><a href='https://gist.github.com/raw/1729992/4eae76f78ba44d5fd0e705d51b0ededbeb0a7a6a/ctags_with_dep.sh'>Download the script </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ./ctags_with_dep.sh file1.c file2.c ... to generate a tags file for these files.</span>
</span><span class='line'>
</span><span class='line'>gcc -M <span class="nv">$*</span> | sed -e <span class="s1">&#39;s/[\\ ]/\n/g&#39;</span> | <span class="se">\</span>
</span><span class='line'>        sed -e <span class="s1">&#39;/^$/d&#39;</span> -e <span class="s1">&#39;/\.o:[ \t]*$/d&#39;</span> | <span class="se">\</span>
</span><span class='line'>        ctags -L - --c++-kinds<span class="o">=</span>+p --fields<span class="o">=</span>+iaS --extra<span class="o">=</span>+q
</span></code></pre></td></tr></table></div></figure>


<p>This script is also available on <a href="https://gist.github.com/1729992">github gist</a>.
If you only want to use it,
<a href="https://gist.github.com/raw/1729992/4eae76f78ba44d5fd0e705d51b0ededbeb0a7a6a/ctags_with_dep.sh">download</a>
the script and use the following command to generate the tags file:</p>

<pre><code>./ctags_with_dep.sh file1.c file2.c file3.cpp ...
</code></pre>

<p>Read on if you want to know what&#8217;s happening here. This script will first use
<code>gcc -M</code> to output the list of header files that are included in our C or C++
source files. However, the output could not be directly used by ctags, thus this
script uses <a href="http://en.wikipedia.org/wiki/Sed">sed</a> commands to filter the output. Finally, this script uses a
<a href="http://en.wikipedia.org/wiki/Pipeline_(Unix)">pipe</a> to put the file list to the <a href="">stdin</a> of the ctags program &#8211; ctags
will read the file list from stdin if <code>-L -</code> is passed to it on the command
line.</p>

<p>What if you have other directories besides the standard <code>/usr/include</code> that
containing the header files you need? You could do a little modification on this
script. For example, you have some header files in <code>~/include</code>, then you could
pass <code>-I ~/include</code> to the gcc command. Just like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gcc -M -I ~/include <span class="nv">$*</span> | sed -e <span class="s1">&#39;s/[\\ ]/\n/g&#39;</span> | <span class="se">\</span>
</span><span class='line'>        sed -e <span class="s1">&#39;/^$/d&#39;</span> -e <span class="s1">&#39;/\.o:[ \t]*$/d&#39;</span> | <span class="se">\</span>
</span><span class='line'>        ctags -L - --c++-kinds<span class="o">=</span>+p --fields<span class="o">=</span>+iaS --extra<span class="o">=</span>+q
</span></code></pre></td></tr></table></div></figure>


<p>If you have any suggestion on this idea, please let me know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use EditorConfig to Maintain Consistent Coding Styles between Different Editors and IDEs]]></title>
    <link href="http://xuhdev.github.com/blog/2012/03/14/use-editorconfig-to-maintain-consistent-coding-styles-between-different-editors-and-ides/"/>
    <updated>2012-03-14T21:46:00+08:00</updated>
    <id>http://xuhdev.github.com/blog/2012/03/14/use-editorconfig-to-maintain-consistent-coding-styles-between-different-editors-and-ides</id>
    <content type="html"><![CDATA[<p>Usually for a project with more than one developer involved, it is essentially
important for the project to define and maintain a consistent <a href="http://en.wikipedia.org/wiki/Programming_style">coding style</a>.
Most code editors and IDEs, such as <a href="http://www.vim.org">Vim</a>, <a href="http://www.gnu.org/software/emacs">Emacs</a>, <a href="http://www.codeblocks.org">Code::Blocks</a>,
provide settings related to coding styles, such as the width of tab, the size of
indentation, <a href="http://en.wikipedia.org/wiki/Newline">end of line</a>, etc. However, it is hard to provide the same settings
for different Editors and IDEs: we have to maintain many config files for
different editors and IDEs, such as <a href="http://vim.wikia.com/wiki/Open_vimrc_file">.vimrc</a> for <a href="http://www.vim.org">Vim</a>, <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html">.emacs</a> for
<a href="http://www.gnu.org/software/emacs">Emacs</a>. In order to solve this, <a href="http://editorconfig.org">EditorConfig</a> was born. By defining coding
style in files named <code>.editorconfig</code>, the <a href="http://editorconfig.org/#download">EditorConfig plugins</a> for different
editors and IDEs will automatically adjust your coding style.</p>

<!-- more -->


<h3>Download EditorConfig Plugin for Your Editor/IDE</h3>

<p>To use EditorConfig, you have to download the corresponding
<a href="http://editorconfig.org/#download">EditorConfig plugins</a> for your Editor or IDE. Follow the installation
instructions to install them.</p>

<h3>Create an <code>.editorconfig</code> File for Your Project</h3>

<p>An <code>.editorconfig</code> file is an <a href="http://en.wikipedia.org/wiki/INI_file">INI</a> format file, which contains the settings
of your coding style. You could use one or more <code>.editorconfig</code> files to
indicate the coding style of your project. Let&#8217;s try a simple example. Create a
file named <code>.editorconfig</code> at the root of your project source tree (if you are
working on Windows and using Windows Explorer, you will find Window Explorer
reports such file name as illegal. Don&#8217;t worry, just create a file named
<code>.editorconfig.</code>, which will be renamed to <code>.editorconfig</code> automatically by
Windows Explorer):</p>

<figure class='code'><figcaption><span>.editorconfig</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="c">; indicate this is the root of the project</span>
</span><span class='line'><span class="na">root</span> <span class="o">=</span> <span class="s">true</span>
</span><span class='line'>
</span><span class='line'><span class="k">[*]</span>
</span><span class='line'><span class="na">indent_style</span> <span class="o">=</span> <span class="s">space</span>
</span><span class='line'><span class="na">end_of_line</span> <span class="o">=</span> <span class="s">cr</span>
</span><span class='line'>
</span><span class='line'><span class="k">[*.c]</span>
</span><span class='line'><span class="na">indent_size</span> <span class="o">=</span> <span class="s">4</span>
</span><span class='line'>
</span><span class='line'><span class="k">[Makefile]</span>
</span><span class='line'><span class="na">indent_style</span> <span class="o">=</span> <span class="s">tab</span>
</span><span class='line'><span class="na">indent_size</span> <span class="o">=</span> <span class="s">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s check this file line by line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="c">; indicate this is the root of the project</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a <a href="http://en.wikipedia.org/wiki/Comment_(computer_programming)">comment line</a>. All lines starting with a <code>#</code> or <code>;</code> will be
regarded as comment lines.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">root</span> <span class="o">=</span> <span class="s">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This line tells EditorConfig this is the root of the project, thus EditorConfig
won&#8217;t apply the settings of <code>.editorconfig</code> outside this directory.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[*]</span>
</span><span class='line'><span class="na">indent_style</span> <span class="o">=</span> <span class="s">space</span>
</span><span class='line'><span class="na">end_of_line</span> <span class="o">=</span> <span class="s">cr</span>
</span></code></pre></td></tr></table></div></figure>


<p>These 3 lines indicates for all files, if not specially specified, we use spaces
for indentation, and use <code>cr</code> as the <a href="http://en.wikipedia.org/wiki/Newline">EOL</a> marker for all files.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[*.c]</span>
</span><span class='line'><span class="na">indent_size</span> <span class="o">=</span> <span class="s">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two lines means, for any C source files, the size of indentation is 4.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[Makefile]</span>
</span><span class='line'><span class="na">indent_style</span> <span class="o">=</span> <span class="s">tab</span>
</span><span class='line'><span class="na">indent_size</span> <span class="o">=</span> <span class="s">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>These 3 lines tell EditorConfig that, for any file named <code>Makefile</code>, we use tab
for indentation, and the size of indentation is 8.</p>

<p>After saving this file, open a C source file and a Makefile in your source tree
with your editor/IDE. If everything goes well, you will find that the
buffer-local coding style settings have been adjusted. (Note: EditorConfig is
not a code formatter. That is to say, the existing codes in your source files
will not be reformatted. Only the style of your newly input code is adjusted.)</p>

<h3>More</h3>

<p>This is just a simple introduction of <a href="http://editorconfig.org">EditorConfig</a>. If you find this
useful, you may want to visit <a href="http://editorconfig.org">EditorConfig homepage</a> to see more
about it.</p>

<p><em>related article:</em></p>

<p><a href="http://treyhunner.com/2012/02/editorconfig"><strong>Maintaining Consistent Coding Conventions With EditorConfig</strong></a> by <a href="http://treyhunner.com"><em>Trey Hunner</em></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add an "Show Image" Switch for the Safari Browser on Your iPhone/iPad/iPod Touch]]></title>
    <link href="http://xuhdev.github.com/blog/2012/03/10/add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/"/>
    <updated>2012-03-10T16:41:00+08:00</updated>
    <id>http://xuhdev.github.com/blog/2012/03/10/add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch</id>
    <content type="html"><![CDATA[<p>When we are using the Mobile Safari Browser to surfing the Internet, sometimes
the page loading speed will be largely slowed down because of the large size of
the images on the web page. Surprisingly, as one of the world&#8217;s most popular
browser, the Safari Browser on <a href="http://en.wikipedia.org/wiki/IOS">iOS</a> (the mobile operating system running on
iPhone/iPad/iPod Touch) does not provide a switch to turn on/off the image display.
However, this does not mean you can not add such a switch by yourself.</p>

<!-- more -->


<h3>Get Your Device Jailbroken</h3>

<p><a href="http://en.wikipedia.org/wiki/IOS_jailbreaking">Jailbreaking</a> is the process of removing the limitations imposed
by Apple on devices running the iOS operating system, such as iPhone, iPad,
iPod Touch, Apple TV. You need to jailbreak your device before you continue to next
step. To get your device jailbroken, please take a look at
<a href="http://www.idownloadblog.com/jailbreak">this page</a>. If you already have your
device jailbroken, you could skip this step.</p>

<h3>Modify Safari.plist</h3>

<p>After jailbreaking, the next thing you need to do is to edit a <a href="http://en.wikipedia.org/wiki/Property_list">plist</a> file
located on your device. If you are a normal user, you may want to install
<a href="http://moreinfo.thebigboss.org/moreinfo/depiction.php?file=ifileData">iFile</a>. If you are familiar with UNIX shell,
<a href="http://thebigboss.org/guides-iphone-ipod-ipad/install-and-use-ssh">log into your device with ssh</a>
might be the best way for you.</p>

<p>You need to edit a file named <code>Safari.plist</code> located in
<code>/System/Library/PreferenceBundles/MobileSafariSettings.bundle/</code> on your device.
To edit this file with iFile, first enter
<code>System/Library/PreferenceBundles/MobileSafariSettings.bundle/</code>.</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/1.png" alt="" /></p>

<p>Then tap <code>Safari.plist</code> and select <code>Text Viewer</code>.</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/2.png" alt="" /></p>

<p>Tap the <code>Edit</code> button on the top left corner.</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/3.png" alt="" /></p>

<p>Insert the following text into this file before the last <code>&lt;/array&gt;</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>cell<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>PSGroupCell<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>defaults<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>com.apple.mobilesafari<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>key<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>WebKitDisplayImagesKey<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>cell<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>PSSwitchCell<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>Show Images<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>default<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It should look something like this:</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/4.png" alt="" /></p>

<p>Save the file. Now open <code>Settings-&gt;Safari</code>, you should see a <code>Show Images</code>
switch at the bottom. If the switch is not shown, please
<a href="http://www.apple.com/support/iphone/assistant/phone/#section_1">reboot your device</a>
and open Safari Settings again.</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-10-add-an-show-image-switch-for-the-safari-browser-on-your-iphone-slash-ipad-slash-ipod-touch/5.png" alt="" /></p>

<p>I tested this on iOS 5.0.1, but it should also work on other versions of iOS.</p>

<p>This post was written based on
<a href="http://bbs.weiphone.com/read-htm-tid-2871429.html">this post</a> (a Chinese post).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use SingleCompile to Compile and Run a Single Source File Easily in Vim]]></title>
    <link href="http://xuhdev.github.com/blog/2012/03/07/use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/"/>
    <updated>2012-03-07T21:08:00+08:00</updated>
    <id>http://xuhdev.github.com/blog/2012/03/07/use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim</id>
    <content type="html"><![CDATA[<p>Although <a href="http://www.vim.org">Vim</a> itself has already been a very powerful text editor, its
plugins make it even better. <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile</a> is a plugin aimed at making it
more convenient to compile or run a single source file without leaving Vim.</p>

<p>Consider this situation: you&#8217;ve just written a small C file (or small python
script) with Vim for some tiny test, then you need to use <code>:!gcc %:p</code> to compile
the C source file and run the executable with <code>:!./a.out</code> command (Or use
<code>:!python %:p</code> to run the python script). Although a key mapping could make
this process a bit convenient, but many of Vim&#8217;s advanced features will become
unavailable, such as <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix</a>, <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#compiler-select">compiler feature</a>.  <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile</a>
was born to solve this problem, making this process more convenient and
powerful than simply defining a few key mappings:</p>

<ul>
<li>Compile or run the source file quickly using <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix feature</a>
and <a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#compiler-select">compiler feature</a> of vim;</li>
<li>Auto detecting compilers and interpreters;</li>
<li>Fast switch between several installed compilers or interpreters;</li>
<li>Multi-language support;</li>
<li>Custom your own compiler/interpreter template;</li>
<li>View the result of last run command at any time(requires <code>tee</code> command);</li>
<li>Run the compiled program asynchronously and view the result at any time
(see <code>:SCCompileRunAsync</code> in the help file).</li>
</ul>


<p>Let&#8217;s see more about SingleCompile.</p>

<!-- more -->


<h3>Installation</h3>

<p>Just like most other Vim plugins, it&#8217;s simple: Download the SingleCompile.zip
file from <a href="http://www.vim.org/scripts/script.php?script_id=3115">SingleCompile homepage</a> and extract it to your Vim
runtime directory(<code>~/.vim</code> on UNIX/Linux or
<code>$VIM_INSTALLATION_FOLDER\vimfiles</code> on windows). Execute <code>:helptags
~/.vim/doc</code> on UNIX/Linux or <code>:helptags $VIM_INSTALLATION_FOLDER\vimfiles\doc</code>
on Windows if you need to check the SingleCompile documentation. If you are
using <a href="https://github.com/tpope/vim-pathogen">pathogen</a> to manage your Vim plugins, use the following commands to
install it (on UNIX/Linux):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">cd</span> ~/.vim/bundle
</span><span class='line'>git clone git://github.com/xuhdev/SingleCompile.git
</span></code></pre></td></tr></table></div></figure>


<p>The following key mappings should be very helpful for you. Insert them into
your <code>.vimrc</code> file if you think it useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>nmap <span class="p">&lt;</span>F9<span class="p">&gt;</span> :SCCompile<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>F10<span class="p">&gt;</span> :SCCompileRun<span class="p">&lt;</span><span class="k">cr</span><span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above two lines will make <code>F9</code> as the key to trigger the compilation and
<code>F10</code> to compile the source file and run.</p>

<h3>Use SingleCompile to Compile and Run a Source File</h3>

<p>Let&#8217;s try to create a new C source file called <code>hello.c</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>vim hello.c
</span></code></pre></td></tr></table></div></figure>


<p>Copy the following content into the buffer:</p>

<figure class='code'><figcaption><span>hello.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, SingleCompile!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now execute <code>:SCCompileRun</code> (or press <code>F10</code> if you have set the key mapping
above). Then SingleCompile will automatically find a C compiler available on
your system (e.g. gcc on my Linux) and use this compiler to compile your
source file and run the executable file. The output should be displayed on
your screen now:</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-07-use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/1.png" alt="" /></p>

<p>What if you want to check the result again after you press any key and the
output is dismissed? Simple, use <code>:SCViewResult</code> command to get it back:</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-07-use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/2.png" alt="" /></p>

<p>OK, let&#8217;s try to add some syntax errors in the source file. Change the buffer
into the following:</p>

<figure class='code'><figcaption><span>hello.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, SingleCompile!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">retur</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* a typo is here: the &quot;return&quot; loses its &quot;n&quot; */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now execute <code>:SCCompileRun</code> (or press <code>F10</code> if you have set the key mapping
above). You should see some compilation errors displayed on the screen now:</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-07-use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/3.png" alt="" /></p>

<p>Now press any key to dismiss the error messages. Now let&#8217;s open the Vim
<a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html">quickfix</a> window by executing <code>:cope</code>:</p>

<p><img src="http://xuhdev.github.com/post-files/2012-03-07-use-singlecompile-to-compile-and-run-a-single-source-file-easily-in-vim/4.png" alt="" /></p>

<p>See? The error messages has been put in the Vim quickfix window, which makes
it quite easy to locate syntax errors!</p>

<h3>Interpreting Languages</h3>

<p>For interpreting languages such as python, perl, things are similar:
interpreter auto detection, Quickfix, etc. but there is one notable difference:
<code>:SCCompile</code> and <code>:SCCompileRun</code> do the same job for such kind of languages &#8211;
they both call the interpreter to run your script, since there is no
compilation required for such langauges.</p>

<h3>More</h3>

<p>SingleCompile is far more powerful than this. Execute <code>:h SingleCompile</code> within
Vim to see SingleCompile documentation if you want to know more about
SingleCompile.</p>
]]></content>
  </entry>
  
</feed>
